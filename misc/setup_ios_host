#!/bin/bash
# Attempt to set up remote agent for parallel_calabash:
#  1. Copies autologin_test_users.app to /Applications
#  2. Copies the config file to ~/.parallel_calabash.iphonesimulator and links to .autotest
#  3. Creates an ssh key if it doesn't already exist
#  4. Sets limit.maxprocs (and limit.maxfiles) to 2500 (and 65536, though let's delete this for now)
#  5. Creates or updates test users with .ssh/authorized_keys, iPhone simulator types, and ~/.rvm.
#  6. Also stops iTunes first-time-login nonsense
#
# And...
#  7. Makes a user-local copy of /etc/ssh/, with sshd_config tweaked for the user, with sshd ports from 2200 up
#  8. Installs a LaunchAgent plist to start the test users' sshd from the desktop context.
#  9. Installs a LaunchAgent plist to ensure the main user's default keychain at boot is login.
# 
# Test users and passwords are taken from the nominated parallel_calabash file.
# 
# Usage:  setup_ios_host user host config
# Or   :  setup_ios_host config

usage() {
    echo Usage: ${0#*/} [user host] config
    echo "   user: remote CI user, assumed to have .ssh established for passwordless login."
    echo "   host: remote hostname"
    echo "   config: parallel_calabash config to install, notably USERS and PASSWORD, and optionally SETUP_IOS_USER, SETUP_IOS_HOST"
    echo $*
    exit 1
}

USER=$1
HOST=$2
CONFIG=$3

if [ -n "$USER" -a -f "$USER" ] ; then
    if [ -n "$HOST" -o -n "$CONFIG" ] ; then
        usage $USER matched a file, but was not the only parameter
    fi
    CONFIG=$USER
    USER=$( ruby -e "config = eval File.read('$CONFIG'); puts config[:SETUP_IOS_USER]" )
    HOST=$( ruby -e "config = eval File.read('$CONFIG'); puts config[:SETUP_IOS_HOST]" )
    echo Using SETUP_IOS_USER=$USER and SETUP_IOS_HOST=$HOST from $CONFIG
fi

[ -n "$CONFIG" -a -f "$CONFIG" ] || { usage No config file "'$CONFIG'"! ; }

ping -q -o "$HOST" || { usage Unable to ping host "'$HOST'" ; }

USERHOST="${USER}@${HOST}"

PASSWORD=$( ruby -e "config = eval File.read('$CONFIG'); puts config[:PASSWORD]" )
USERS=$( ruby -e "config = eval File.read('$CONFIG'); puts config[:USERS]" | sort -u )

echo Copy application, config file, and authorise application to use UI Automation.

rsync -r --delete ${0%/*}/autostart_test_users.app ${USERHOST}:/Applications/
rsync $CONFIG ${USERHOST}:.parallel_calabash.iphonesimulator
ssh ${USERHOST} "ln -s .parallel_calabash.iphonesimulator .parallel_calabash.autostart"
echo "${PASSWORD}" | ssh ${USERHOST} "sudo -S sqlite3 '/Library/Application Support/com.apple.TCC/TCC.db' 'INSERT or REPLACE INTO access VALUES(\"kTCCServiceAccessibility\",\"com.apple.ScriptEditor.id.autostart-test-users\",0,1,0,NULL)'"

echo Supposedly skip checking vs localhost with vnc addresses. Not sure if this is needed or functional.

echo "${PASSWORD}" | ssh ${USERHOST} "sudo -S defaults write com.apple.ScreenSharing skipLocalAddressCheck -boolean YES"

echo "Bump maxproc to the highest possible; delete maxfiles if it's 65536 because that's not proven necessary."

rsync -r ${0%/*}/limit.max*.plist ${USERHOST}:/tmp/
echo "${PASSWORD}" | ssh ${USERHOST} "sudo -S cp /tmp/limit.maxproc.plist /Library/LaunchDaemons/limit.maxproc.plist"
echo "${PASSWORD}" | ssh ${USERHOST} "sudo -S -s 'grep 65536 /Library/LaunchDaemons/limit.maxfile.plist && rm /Library/LaunchDaemons/limit.maxfile.plist'"

echo "Ensure there's an ssh key and don't fret about localhost authentication."

ssh ${USERHOST} "echo n | ssh-keygen -q -f .ssh/id_rsa -N ''"
ssh ${USERHOST} "(echo 'Host *' ; echo '    StrictHostKeyChecking no'; echo 'UserKnownHostsFile /dev/null') >> .ssh/config"

echo "Reboot the auto-login user if the default keychain is not 'login' - otherwise Screen Sharing will not work. Only needed for master machine."

ssh ${USERHOST} "sed -E 's/MAIN_USER/$USER/' </Users/$USER/Autostart/autostart_test_users.reboot.plist >/Users/$USER/Library/LaunchAgents/autostart_test_users.reboot.plist"
rsync ${0%/*}/autostart_test_users.reboot.* ${USERHOST}:Autostart/

uid=500

echo About to mkusers

count=0
for nuser in $USERS ; do
count=$[ count + 1 ]
echo ==========================
echo "User $nuser (/$count)"
echo ==========================
  case "$nuser" in
    *@*)
        ihost=${nuser#*@}
        nuser=${nuser%@*}
        iuser=$( ruby -e "config = eval File.read('$CONFIG'); puts config[:INSTALL_USERS]['$ihost'] || config[:INSTALL_USERS]['']" )
        [ -z "$iuser" ] && echo NO INSTALL_USERS FOR $ihost && exit 1
        iuserhost=$iuser@$ihost
  echo "iuser@ihost = $iuserhost"
  echo ==========================
        ;;
    *)
        iuser=$USER
        ihost=$HOST
        iuserhost="${USER}@${HOST}"
  echo "USER@HOST = $iuserhost"
  echo ==========================
        ;;
  esac

    os_version=$(ssh ${iuserhost} "sw_vers -productVersion")
    buddy_version=$(ssh ${iuserhost} "sw_vers -buildVersion")
    UIDS=$(ssh ${iuserhost} "dscl . -list /Users UniqueID")
    [ -n "$UIDS" ] || { usage "Unable to retrieve UIDs from: ssh $iuserhost \"dscl . -list /Users UniqueID\" ($UIDS)" ; }

    GID=$(ssh ${iuserhost} "dscl . -list /Users PrimaryGroupID | awk '/^$iuser /{ print \$2 }'")
    [ -n "$GID" ] || { usage "Unable to retrieve GID from: ssh $iuserhost \"dscl . -list /Users PrimaryGroupID\" ($GID)" ; }

    if echo start $UIDS end | grep " $nuser "; then
        echo USER $nuser already exists: updating only.
        cat <<END | ssh ${iuserhost} sudo -S -s
$PASSWORD
dscl . create /Users/$nuser PrimaryGroupID $GID
defaults write com.apple.CrashReporter UseUNC 1
END
    else
        uid=$[ uid + 1 ]
        while echo start $UIDS end | grep " $uid " ; do uid=$[ uid + 1 ] ; done
        echo USER $nuser is new: creating.
        cat <<END | ssh ${iuserhost} sudo -S -s
$PASSWORD
rm -rf /Users/$nuser
dscl . create /Users/$nuser
dscl . create /Users/$nuser UserShell /bin/bash
dscl . create /Users/$nuser RealName $nuser
dscl . create /Users/$nuser UniqueID $uid
dscl . create /Users/$nuser PrimaryGroupID $GID
dscl . create /Users/$nuser NFSHomeDirectory /Users/$nuser
dscl . passwd /Users/$nuser $PASSWORD
dscl . append /Groups/admin GroupMembership $nuser
dscl . append /Groups/staff GroupMembership $nuser
END
    fi

    # A bit excessive to rsync this for every user, but... eh.
    echo rsync...
    rsync ${0%/*}/autostart_test_users.sshd.* ${iuserhost}:Autostart/
    rsync ${0%/*}/autostart_test_users.stop ${iuserhost}:Autostart/

    echo script...    
    cat <<END | ssh ${iuserhost} sudo -S -s
$PASSWORD
echo Update started
mkdir -p /Users/$nuser/.ssh
touch /Users/$nuser/.ssh/authorized_keys
chmod 644 /Users/$nuser/.ssh/authorized_keys
cat /Users/$iuser/.ssh/id_rsa.pub >> /Users/$nuser/.ssh/authorized_keys
cat /Users/$iuser/.ssh/authorized_keys /Users/$nuser/.ssh/authorized_keys >>/Users/$nuser/.ssh/authorized_keys.2
mv  /Users/$nuser/.ssh/authorized_keys.2 /Users/$nuser/.ssh/authorized_keys
ln -s /Users/$iuser/.rvm /Users/$nuser/
mkdir -p /Users/$nuser/Library/Preferences
defaults write /Users/$nuser/Library/Preferences/com.apple.SetupAssistant DidSeeCloudSetup -bool TRUE
defaults write /Users/$nuser/Library/Preferences/com.apple.SetupAssistant GestureMovieSeen none
defaults write /Users/$nuser/Library/Preferences/com.apple.SetupAssistant LastSeenCloudProductVersion ${os_version}
defaults write /Users/$nuser/Library/Preferences/com.apple.SetupAssistant LastSeenBuddyBuildVersion ${buddy_version}
cp /Users/$iuser/Library/Preferences/com.apple.iphonesimulator.plist /Users/$nuser/Library/Preferences/com.apple.iphonesimulator.plist 
mkdir -p /Users/$nuser/Library/LaunchAgents
sed -E 's/TEST_USER/$nuser/; s/MAIN_USER/$iuser/' </Users/$iuser/Autostart/autostart_test_users.sshd.plist >/Users/$nuser/Library/LaunchAgents/autostart_test_users.sshd.plist
rm -rf /Users/$nuser/ssh
cp -r /etc/ssh /Users/$nuser/ssh
sed -E -i~ 's/\/etc\//\/Users\/$nuser\//; s/#(ListenAddress|HostKey)/\1/; s/#Port 22/Port '$[ count + 2200 ]'/;' /Users/$nuser/ssh/sshd_config
chown -R "${nuser}" "/Users/$nuser"
defaults write com.apple.CrashReporter UseUNC 1
END
    echo y | ssh ${iuserhost} ssh $nuser@localhost echo SUCCESS FOR \$\\\( id $nuser \\\)
done

